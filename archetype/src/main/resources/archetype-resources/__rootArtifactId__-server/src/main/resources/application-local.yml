#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
server:
  port: 48080

--- ${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound} 数据库相关配置 ${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}

spring:
  autoconfigure:
    exclude:
      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure ${symbol_pound} 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源
      - org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration ${symbol_pound} 排除积木报表带来的 MongoDB 的自动配置
      - org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration ${symbol_pound} 默认 local 环境，不开启 Quartz 的自动配置
  datasource:
    druid: ${symbol_pound} Druid 【监控】相关的全局配置
      web-stat-filter:
        enabled: true
      stat-view-servlet:
        enabled: true
        allow: ${symbol_pound} 设置白名单，不填则允许所有访问
        url-pattern: /druid/*
        login-username: ${symbol_pound} 控制台管理用户名和密码
        login-password:
      filter:
        stat:
          enabled: true
          log-slow-sql: true ${symbol_pound} 慢 SQL 记录
          slow-sql-millis: 100
          merge-sql: true
        wall:
          config:
            multi-statement-allow: true
    dynamic: ${symbol_pound} 多数据源配置
      druid: ${symbol_pound} Druid 【连接池】相关的全局配置
        initial-size: 1 ${symbol_pound} 初始连接数
        min-idle: 1 ${symbol_pound} 最小连接池数量
        max-active: 20 ${symbol_pound} 最大连接池数量
        max-wait: 600000 ${symbol_pound} 配置获取连接等待超时的时间，单位：毫秒
        time-between-eviction-runs-millis: 60000 ${symbol_pound} 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒
        min-evictable-idle-time-millis: 300000 ${symbol_pound} 配置一个连接在池中最小生存的时间，单位：毫秒
        max-evictable-idle-time-millis: 900000 ${symbol_pound} 配置一个连接在池中最大生存的时间，单位：毫秒
        validation-query: SELECT 1 FROM DUAL ${symbol_pound} 配置检测连接是否有效
        test-while-idle: true
        test-on-borrow: false
        test-on-return: false
      primary: master
      datasource:
        master:
          name: saltyfish-boot
          url: jdbc:mysql://127.0.0.1:3306/${symbol_dollar}{spring.datasource.dynamic.datasource.master.name}?useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true&nullCatalogMeansCurrent=true ${symbol_pound} MySQL Connector/J 8.X 连接的示例
          username: root
          password: root0917
        slave: ${symbol_pound} 模拟从库，可根据自己需要修改
          name: saltyfish-boot
          lazy: true ${symbol_pound} 开启懒加载，保证启动速度
          url: jdbc:mysql://127.0.0.1:3306/${symbol_dollar}{spring.datasource.dynamic.datasource.slave.name}?useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true&nullCatalogMeansCurrent=true ${symbol_pound} MySQL Connector/J 8.X 连接的示例
          username: root
          password: root0917

  ${symbol_pound} Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优
  redis:
    host: 127.0.0.1 ${symbol_pound} 地址
    port: 9736 ${symbol_pound} 端口
    database: 0 ${symbol_pound} 数据库索引
    password: Zz2825311647 ${symbol_pound} 密码，建议生产环境开启

--- ${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound} 定时任务相关配置 ${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}

${symbol_pound} Quartz 配置项，对应 QuartzProperties 配置类
spring:
  quartz:
    auto-startup: true ${symbol_pound} 本地开发环境，尽量不要开启 Job
    scheduler-name: schedulerName ${symbol_pound} Scheduler 名字。默认为 schedulerName
    job-store-type: jdbc ${symbol_pound} Job 存储器类型。默认为 memory 表示内存，可选 jdbc 使用数据库。
    wait-for-jobs-to-complete-on-shutdown: true ${symbol_pound} 应用关闭时，是否等待定时任务执行完成。默认为 false ，建议设置为 true
    properties: ${symbol_pound} 添加 Quartz Scheduler 附加属性，更多可以看 http://www.quartz-scheduler.org/documentation/2.4.0-SNAPSHOT/configuration.html 文档
      org:
        quartz:
          ${symbol_pound} Scheduler 相关配置
          scheduler:
            instanceName: schedulerName
            instanceId: AUTO ${symbol_pound} 自动生成 instance ID
          ${symbol_pound} JobStore 相关配置
          jobStore:
            ${symbol_pound} JobStore 实现类。可见博客：https://blog.csdn.net/weixin_42458219/article/details/122247162
            class: org.springframework.scheduling.quartz.LocalDataSourceJobStore
            isClustered: true ${symbol_pound} 是集群模式
            clusterCheckinInterval: 15000 ${symbol_pound} 集群检查频率，单位：毫秒。默认为 15000，即 15 秒
            misfireThreshold: 60000 ${symbol_pound} misfire 阀值，单位：毫秒。
          ${symbol_pound} 线程池相关配置
          threadPool:
            threadCount: 25 ${symbol_pound} 线程池大小。默认为 10 。
            threadPriority: 5 ${symbol_pound} 线程优先级
            class: org.quartz.simpl.SimpleThreadPool ${symbol_pound} 线程池类型
    jdbc: ${symbol_pound} 使用 JDBC 的 JobStore 的时候，JDBC 的配置
      initialize-schema: NEVER ${symbol_pound} 是否自动使用 SQL 初始化 Quartz 表结构。这里设置成 never ，我们手动创建表结构。

--- ${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound} 消息队列相关 ${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}

${symbol_pound} rocketmq 配置项，对应 RocketMQProperties 配置类
rocketmq:
  name-server: 127.0.0.1:9876 ${symbol_pound} RocketMQ Namesrv

spring:
  ${symbol_pound} RabbitMQ 配置项，对应 RabbitProperties 配置类
  rabbitmq:
    host: 127.0.0.1 ${symbol_pound} RabbitMQ 服务的地址
    port: 5672 ${symbol_pound} RabbitMQ 服务的端口
    username: guest ${symbol_pound} RabbitMQ 服务的账号
    password: guest ${symbol_pound} RabbitMQ 服务的密码
  ${symbol_pound} Kafka 配置项，对应 KafkaProperties 配置类
  kafka:
    bootstrap-servers: 127.0.0.1:9092 ${symbol_pound} 指定 Kafka Broker 地址，可以设置多个，以逗号分隔

--- ${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound} 服务保障相关配置 ${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}

${symbol_pound} Lock4j 配置项
lock4j:
  acquire-timeout: 3000 ${symbol_pound} 获取分布式锁超时时间，默认为 3000 毫秒
  expire: 30000 ${symbol_pound} 分布式锁的超时时间，默认为 30 毫秒

${symbol_pound} Resilience4j 配置项
resilience4j:
  ratelimiter:
    instances:
      backendA:
        limit-for-period: 1 ${symbol_pound} 每个周期内，允许的请求数。默认为 50
        limit-refresh-period: 60s ${symbol_pound} 每个周期的时长，单位：微秒。默认为 500
        timeout-duration: 1s ${symbol_pound} 被限流时，阻塞等待的时长，单位：微秒。默认为 5s
        register-health-indicator: true ${symbol_pound} 是否注册到健康监测

--- ${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound} 监控相关配置 ${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}

${symbol_pound} Actuator 监控端点的配置项
management:
  ${symbol_pound}暴露actuator的全部endpoint（即/actuator系列路径)，默认只暴露少数endpoint
  endpoints:
    web:
      base-path: /actuator ${symbol_pound} Actuator 提供的 API 接口的根目录。默认为 /actuator
      exposure:
        include: '*' ${symbol_pound} 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。
  ${symbol_pound}显示节点健康的具体信息，/actuator/health默认只返回节点状态（up|down），不返回节点的具体信息
  endpoint:
    health:
      show-details: always

${symbol_pound} Spring Boot Admin 配置项
spring:
  security:
    user:
      name: amos09
      password: amos09
  boot:
    admin:
      ${symbol_pound} Spring Boot Admin Client 客户端的相关配置
      client:
        url: http://127.0.0.1:9999 ${symbol_pound} 设置 Spring Boot Admin Server 地址
        username: ${symbol_dollar}{spring.security.user.name}
        password: ${symbol_dollar}{spring.security.user.password}
        instance:
          service-host-type: IP ${symbol_pound} 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]
      ${symbol_pound} Spring Boot Admin Server 服务端的相关配置
      context-path: /admin ${symbol_pound} 配置 Spring
      metadata:
        user:
          name: ${symbol_dollar}{spring.security.user.name}
          password: ${symbol_dollar}{spring.security.user.password}

${symbol_pound} 日志文件配置
logging:
  file:
    name: ./logs/${symbol_dollar}{spring.application.name}.log ${symbol_pound} 日志文件名，全路径
  level:
    ${symbol_pound} 配置自己写的 MyBatis Mapper 打印日志
    ${package}.*.infrastructure.mapper: debug

--- ${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound} 微信公众号、小程序相关配置 ${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}
wx:
  mp: ${symbol_pound} 公众号配置（必填），参见 https://github.com/Wechat-Group/WxJava/blob/develop/spring-boot-starters/wx-java-mp-spring-boot-starter/README.md 文档
    app-id: wx5b23ba7a5589ecbb ${symbol_pound} 测试号
    secret: 2a7b3b20c537e52e74afd395eb85f61f
    ${symbol_pound} 存储配置，解决 AccessToken 的跨节点的共享
    config-storage:
      type: RedisTemplate ${symbol_pound} 采用 RedisTemplate 操作 Redis，会自动从 Spring 中获取
      key-prefix: wx ${symbol_pound} Redis Key 的前缀
      http-client-type: HttpClient ${symbol_pound} 采用 HttpClient 请求微信公众号平台
  miniapp: ${symbol_pound} 小程序配置（必填），参见 https://github.com/Wechat-Group/WxJava/blob/develop/spring-boot-starters/wx-java-miniapp-spring-boot-starter/README.md 文档
    appid: wx63c280fe3248a3e7 ${symbol_pound} wenhualian的接口测试号
    secret: 6f270509224a7ae1296bbf1c8cb97aed
    config-storage:
      type: RedisTemplate ${symbol_pound} 采用 RedisTemplate 操作 Redis，会自动从 Spring 中获取
      key-prefix: wa ${symbol_pound} Redis Key 的前缀
      http-client-type: HttpClient ${symbol_pound} 采用 HttpClient 请求微信公众号平台

saltyfish:
  captcha:
    enable: false ${symbol_pound} 本地环境，暂时关闭图片验证码，方便登录等接口的测试；
  security:
    mock-enable: true
    xss:
      enabled: true
      includePaths:
        - www.baidu.com/**
      excludePaths:
        - ${symbol_dollar}{spring.boot.admin.context-path}/** ${symbol_pound} 不处理 Spring Boot Admin 的请求
        - ${symbol_dollar}{management.endpoints.web.base-path}/** ${symbol_pound} 不处理 Actuator 的请求
  pay:
    order-notify-url: http://yunai.natapp1.cc/admin-api/pay/notify/order ${symbol_pound} 支付渠道的【支付】回调地址
    refund-notify-url: http://yunai.natapp1.cc/admin-api/pay/notify/refund ${symbol_pound} 支付渠道的【退款】回调地址
  access-log: ${symbol_pound} 访问日志的配置项
    enable: false
  error-code: ${symbol_pound} 错误码相关配置项
    enable: false
  demo: false ${symbol_pound} 关闭演示模式
  tencent-lbs-key: TVDBZ-TDILD-4ON4B-PFDZA-RNLKH-VVF6E ${symbol_pound} QQ 地图的密钥 https://lbs.qq.com/service/staticV2/staticGuide/staticDoc

justauth:
  enabled: true
  type:
    DINGTALK: ${symbol_pound} 钉钉
      client-id: dingvrnreaje3yqvzhxg
      client-secret: i8E6iZyDvZj51JIb0tYsYfVQYOks9Cq1lgryEjFRqC79P3iJcrxEwT6Qk2QvLrLI
      ignore-check-redirect-uri: true
    WECHAT_ENTERPRISE: ${symbol_pound} 企业微信
      client-id: wwd411c69a39ad2e54
      client-secret: 1wTb7hYxnpT2TUbIeHGXGo7T0odav1ic10mLdyyATOw
      agent-id: 1000004
      ignore-check-redirect-uri: true
    WECHAT_MINI_APP: ${symbol_pound} 微信小程序
      client-id: ${symbol_dollar}{wx.miniapp.appid}
      client-secret: ${symbol_dollar}{wx.miniapp.secret}
      ignore-check-redirect-uri: true
      ignore-check-state: true ${symbol_pound} 微信小程序，不会使用到 state，所以不进行校验
    WECHAT_MP: ${symbol_pound} 微信公众号
      client-id: ${symbol_dollar}{wx.mp.app-id}
      client-secret: ${symbol_dollar}{wx.mp.secret}
      ignore-check-redirect-uri: true
      ignore-check-state: true ${symbol_pound} 微信公众号，未调用后端的 getSocialAuthorizeUrl 方法，所以无法进行 state 校验

  cache:
    type: REDIS
    prefix: 'social_auth_state:' ${symbol_pound} 缓存前缀，目前只对 Redis 缓存生效，默认 JUSTAUTH::STATE::
    timeout: 24h ${symbol_pound} 超时时长，目前只对 Redis 缓存生效，默认 3 分钟

